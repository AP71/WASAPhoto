openapi: 3.0.3
info:
  title: WASAPhoto
  description: |
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! Directly
    from your PC, you can upload your photos, and they will be visible to everyone who is following you.
  version: "0.0.1"
paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: |
              User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
    get:
      tags: ["Operations"]
      summary: Get users 
      description: |
        If a username is passed, it retrieves all users that match the username,
        otherwise retrieve all users.
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: query
          schema: 
            type: string
          required: false
      responses:
        '200':
          description: |
            Obtain the list of the user. 
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    username:
                      type: string 
  /session/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
      description: username's identifier
    patch:
      tags: ["Operations"]
      summary: Changes the username
      description: |
        Lets user to change their username with another one.
        If the username isn't free, an error will return.
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '200':
          description: |
            Username changed successfully.
        '400':
          description: |
            This username is already used by another user.
    post:
      tags: ["Operations"]
      summary: Upload a new photo
      description: |
        Lets user to upload a new photo in their profile.
      operationId: uploadPhoto
      security:
        - bearerAuth: []
      requestBody:
        description: New photo
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: |
            File uploaded successfully.
  /session/profile:
    parameters:
      - name: idUser
        in: query
        schema:
          type: string
        required: true
        description: username's identifier
    get:
      tags: ["Social operations"]
      summary: Retrive a user's profile
      description: |
        Returns the profile of the user passed as input in the path.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Profile returned successfully.
          content:
            application/json:
              schema:
                type: 
                  object
                properties:
                  id: 
                    type: string
                  username:
                    type: string
                  photo:
                    type: array
                    items:
                      properties:
                        id: 
                          type: string
                        data:
                          type: string
                          format: date-time
                          description: Upload date
                          example: "2022-01-01T00:00:00Z"
                        photo:  
                          type: string
                          format: binary
                  followers:
                    type: integer
                  following: 
                    type: integer
                  photoCounter:
                    type: integer
        '400':
          description: |
            User not found.
    post:
      tags: ["Social operations"]
      summary: Follow a user
      description: |
        Lets user to follow another user.
      operationId: followUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            User followed successfully.
        '400':
          description: |
            Unable to follow this user.
    delete:
      tags: ["Social operations"]
      summary: Unfollow a user
      description: |
        Lets user to unfollow another user.
      operationId: unfollowUser
      security:
        - bearerAuth: []
      responses:
        '200': 
          description: |
            User unfollowed successfully.
        '400':
          description: |
            Unable to unfollow this user.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    UnauthorizedError:
      description: Access username is missing or invalid