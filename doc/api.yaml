openapi: 3.0.3
info:
  title: WASAPhoto
  description: |
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! Directly
    from your PC, you can upload your photos, and they will be visible to everyone who is following you.
  version: "0.0.1"
tags: 
  - name: "Login"
    description: "Login operations"
  - name: "Profile operations"
    description: "Allows users to change their username and upload/delete their photos"
  - name: "Interactions with other users"
    description: "Allows users to search for other users, follow, ban and recover their profile"
  - name: "Feed operations"
    description: "Allows users to fetch the photo feed, add/remove likes and add/remove/view comments"
paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username'
        required: true
      responses:
        '201':
          description: |
            User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier'    
        '400': {$ref: '#/components/responses/badRequest'}
        '5XX': {$ref: '#/components/responses/serverError'}
  /profiles/:
    get:
      tags: ["Interactions with other users"]
      summary: Search users
      description: |
        Retrieves all users that match the username passed in the query. If the feedPageId is not passed, the first page will returned.
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - {$ref: '#/components/parameters/userToSearch'}
        - {$ref: '#/components/parameters/pageId'}
      responses:
        '200':
          description: |
            Obtain the list of the user. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '400':  {$ref: '#/components/responses/badRequest'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /profiles/{username}/username:
    parameters:
      - {$ref: '#/components/parameters/username'}
    put:
      tags: ["Profile operations"]
      summary: Changes the username
      description: |
        Lets user to change their username with another one.
        If the username isn't free, an error will return.
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUsername'
        required: true
      responses:
        '201':
          description: |
            Username changed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username'
        '400':  {$ref: '#/components/responses/badRequest'}
        '409':  {$ref: '#/components/responses/conflictError'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '403':  {$ref: '#/components/responses/forbiddenAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /profiles/{username}/:
    parameters:
      - {$ref: '#/components/parameters/username'}
    get:
      tags: ["Interactions with other users"]
      summary: Retrive a user's profile
      description: |
        Returns the profile of the user passed as input in the path.
      operationId: getUserProfile
      parameters:
        - {$ref: '#/components/parameters/pageId'}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Profile returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProfile'
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '5XX':  {$ref: '#/components/responses/serverError'}
  /profiles/{username}/photos/:  
    parameters:
      - {$ref: '#/components/parameters/username'}
    post:
      tags: ["Profile operations"]
      summary: Upload a new photo
      description: |
        Lets user to upload a new photo in their profile.
      operationId: uploadPhoto
      security:
        - bearerAuth: []
      requestBody:
        description: New photo
        content:
          image/*:
            schema:
              $ref: '#/components/schemas/file'          
        required: true
      responses:
        '201':
          description: |
            File uploaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '415':  {$ref: '#/components/responses/fileNotSupported'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /profiles/{username}/photos/{photoId}:  
    parameters:
      - {$ref: '#/components/parameters/username'}
      - {$ref: '#/components/parameters/photoId'}
    delete:
      tags: ["Profile operations"]
      summary: Delete a photo
      description: |
        Lets user to delete a photo.
      operationId: deletePhoto
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |
            File deleted successfully.
        '400':  {$ref: '#/components/responses/badRequest'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /profiles/{username}/banned/{byUsername}:
    parameters:
      - {$ref: '#/components/parameters/username'}
      - {$ref: '#/components/parameters/byUsername'}
    put:
      tags: ["Interactions with other users"]
      summary: Ban another user
      description: |
        Lets user to ban another user.
      operationId: banUser
      security:
        - bearerAuth: []
      responses:
        '201':
          description: |
            User banned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '409':  {$ref: '#/components/responses/conflictError'}
        '5XX':  {$ref: '#/components/responses/serverError'}
    delete:
      tags: ["Interactions with other users"]
      summary: Unban another user
      description: |
        Lets user to unban another user.
      operationId: unbanUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |
            User unbanned successfully.
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '409':  {$ref: '#/components/responses/conflictError'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /profiles/{username}/followed/{byUsername}:
    parameters:
      - {$ref: '#/components/parameters/username'}
      - {$ref: '#/components/parameters/byUsername'}
    put:
      tags: ["Interactions with other users"]
      summary: Follow a user
      description: |
        Lets user to follow another user.
      operationId: followUser
      security:
        - bearerAuth: []
      responses:
        '201':
          description: |
            User followed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '409':  {$ref: '#/components/responses/conflictError'}
        '5XX':  {$ref: '#/components/responses/serverError'}
    delete:
      tags: ["Interactions with other users"]
      summary: Unfollow a user
      description: |
        Lets user to unfollow another user.
      operationId: unfollowUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |
            User unfollowed successfully.
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '409':  {$ref: '#/components/responses/conflictError'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /feed/:
    get:
      tags: ["Feed operations"]
      summary: Retrive photo stream
      description: |
        Retrieves all the photo shared by your following. If the pageId is not passed, the first page will returned.
      operationId: getMyStream
      security:
        - bearerAuth: []
      parameters:
        - {$ref: '#/components/parameters/pageId'}
      responses:
        '200':
          description: |
            Obtain the list of image.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedPhoto'
        '204':
          description: |
            There isn't any image to show.
        '400':  {$ref: '#/components/responses/badRequest'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /feed/{photoId}/: 
    parameters:
      - {$ref: '#/components/parameters/photoId'}
    get:
      tags: ["Feed operations"]
      summary: Retrive a photo.
      description: |
        Retrieves a photo that match with the photoId passed in input.
      operationId: getPhoto
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Obtain an image.
          content:
            image/*:
              schema:
                $ref: '#/components/schemas/file'
        '400':  {$ref: '#/components/responses/badRequest'}
        '404':  {$ref: '#/components/responses/notFoundError'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /feed/{photoId}/likes/{username}:
    parameters:
      - {$ref: '#/components/parameters/photoId'}
      - {$ref: '#/components/parameters/username'}
    put:
      tags: ["Feed operations"]
      summary: Place a like
      description: |
        Lets user to place a like on an image.
      operationId: likePhoto
      security:
        - bearerAuth: []
      responses:
        '201':
          description: |
            Like placed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '400':  {$ref: '#/components/responses/badRequest'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '409':  {$ref: '#/components/responses/conflictError'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
    delete:
      tags: ["Feed operations"]
      summary: Unplace a like
      description: |
        Lets user to unplace a like on an image.
      operationId: unlikePhoto
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |
            Like unplaced successfully.
        '400':  {$ref: '#/components/responses/badRequest'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '409':  {$ref: '#/components/responses/conflictError'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /feed/{photoId}/comments/{username}:
    parameters:
      - {$ref: '#/components/parameters/photoId'}
      - {$ref: '#/components/parameters/username'}
    post:
      tags: ["Feed operations"]
      summary: Place a comment
      description: |
        Lets user to place a comment on an image.
      operationId: commentPhoto
      security:
        - bearerAuth: []
      requestBody:
        description: Comment details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/textComment'
        required: true
      responses:
        '201':
          description: |
            Comment placed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '400':  {$ref: '#/components/responses/badRequest'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
    delete:
      tags: ["Feed operations"]
      summary: Unplace a comment
      description: |
        Lets user to unplace a comment on an image.
      operationId: uncommentPhoto
      security:
        - bearerAuth: []
      parameters:
        - name: idCommento
          schema:
            type: string
            pattern: ^[a-zA-Z0-9]*$'
            minLength: 8
            maxLength: 8
          in: query
          required: true
          description: Comment identifier.
      responses:
        '204':
          description: |
            Comment unplaced successfully.
        '400':  {$ref: '#/components/responses/badRequest'}
        '404':  {$ref: '#/components/responses/notFoundError'}  
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
  /feed/{photoId}/comments/:
    parameters:
    - {$ref: '#/components/parameters/photoId'}
    - {$ref: '#/components/parameters/pageId'}
    get:
      tags: ["Feed operations"]
      summary: Retrive comments
      description: |
        Retrieve all comments related to the photo. If the commentsPageId is not passed, the first page of comments will returned.
      operationId: getComments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Obtain the list of comments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments'
        '204':
          description: |
            There aren't any comment to retrive.
        '400':  {$ref: '#/components/responses/badRequest'}
        '401':  {$ref: '#/components/responses/unauthAccess'}
        '5XX':  {$ref: '#/components/responses/serverError'}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    username: 
      description: User's name.
      name: username
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/stringUsername'
    byUsername:
      description: User that do the action.
      name: byUsername
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/stringUsername'
    photoId:
      description: Photo identifier.
      name: photoId
      in: path
      required: true
      schema:
        type: integer
    userToSearch:
      description: User to search.
      name: userToSearch
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/stringUsername'
    pageId:
      description: Page identifier.
      name: pageId
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
  schemas:  
    stringUsername:
      title: Username info
      type: string
      pattern: '^[a-zA-Z0-9_.]*$' 
      minLength: 3
      maxLength: 16
      example: Maria
      description: User's username.
    stringIdentifier:
      title: User identifier info
      type: string
      minLength: 36
      maxLength: 36
      example: 123e4567-e89b-12d3-a456-426614174000
      description: User identifier (uuid).
    integerPhoto:
      title: Photo identifier info
      type: integer
      example: 1452
      minimum: 0
      description: Photo identifier.
    userProfile:
      title: User's Profile
      description: |
        Represents user profile, including followers, following, number of posts and photos.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/stringIdentifier'
        username:
          $ref: '#/components/schemas/stringUsername'
        photos:
          type: array
          items:
            properties:
              photoId:
                $ref: '#/components/schemas/integerPhoto'
          minItems: 1
          maxItems: 10
          description: List of photos.
        nextPhotosPageId:
          type: integer
          example: 3
          minimum: 0
          description: Represents the next page's id of photos.
        followers:
          type: integer
          example: 3543
          minimum: 0
          description: Number of followers.
        following: 
          type: integer
          example: 245
          minimum: 0
          description: Number of following.
        photoCounter:
          type: integer
          example: 6
          minimum: 0
          description: Number of photos.
    newUsername:
      title: New Username      
      description: |
        Represents the user's username.
      type: object
      properties:
        newUsername:
          $ref: '#/components/schemas/stringUsername'
    comments:
      title: List of comments 
      description: |
        Represents the list of comments.
      type: object
      properties:
        comments:
          description: List of comments.
          type: array
          items:
            $ref: '#/components/schemas/comment'
          minItems: 1
          maxItems: 10
        nextCommentPageId:
          type: integer
          minimum: 1
          example: 2
          description: Id of the next page of comments.
    comment: 
      title: Full comment example
      type: object
      properties:
        idUser:
          $ref: '#/components/schemas/stringIdentifier'
        username: 
          $ref: '#/components/schemas/stringUsername'
        commentId: 
          type: integer
          example: 3432
          description: Comment identifier.
        data:
          type: string
          format: date-time
          example: "2022-01-01T00:00:00Z"
          description: Upload date.
        text:  
          type: string
          minLength: 1
          maxLength: 250
          example: Bella foto!!
          description: Comment text.
    textComment:
      title: Comment example
      description: |
        Represents one comment.
      type: object
      properties:
        text:
          type: string
          pattern: '^[a-zA-Z0-9_., !?:;""$%&€()[{}]*$'
          minLength: 1
          maxLength: 250
          example: Bella foto!!
          description: Comment text.
    feedPhoto:
      title: Feed containing photos
      description: |
        Represents the feed.
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/postsExample'
          minItems: 1
          maxItems: 10
          description: List of photos.
        nextFeedPageId:
          type: integer
          minimum: 1
          example: 7
          description: Id of the next page of posts.
    postsExample:
      title: Post example
      description: |
        Represents one post.
      type: object
      properties:
        photo:  
          $ref: '#/components/schemas/integerPhoto'
        data:
          type: string
          format: date-time
          description: Upload date
          example: "2022-01-01T00:00:00Z"
        user:
          $ref: '#/components/schemas/stringIdentifier'
        numberOfLikes:
          type: integer
          example: 540
          minimum: 0
          description: Number of likes.
        numberOfComments:
          type: integer
          example: 15
          minimum: 0
          description: Number of comments.
    username:
      title: Username
      description: |
        Represents the username.
      type: object
      properties:
        username:
          $ref: '#/components/schemas/stringUsername'
    user:  
      title: User
      description: Represents an identifier and a username for one user.
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/stringIdentifier'
        username:
          $ref: '#/components/schemas/stringUsername'
    users:
      title: List of users
      description: |
        Represents an object that includes a list of 10 user.
      type: object
      properties: 
        users:
          type: array
          items:
            $ref: '#/components/schemas/user'
          minItems: 1
          maxItems: 10
          description: List of Users.
        nextUsersPageId: 
          type: integer
          minimum: 1
          example: 7
          description: Id of the next page of users.
    success:
      title: Success message
      description: |
        Represents an object that includes a message.
      type: object
      properties:
        message:
          type: string
          example: Resource created
          description: Success message.
    identifier:
      title: User identifier
      description: Represents the user identifier.
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/stringIdentifier'
    file:
      title: Image
      description: Represents an image.
      type: string
      format: binary   
      minLength: 0
      maxLength: 8388608
    errorMessage:
      title: Error message.
      description: Represents the error message.
      type: object
      properties:
        message: 
          type: string
          pattern: '^[a-zA-Z0-9_., !?:;""$%&€()[{}]*$'
          example: Error message.
          minLength: 0
          maxLength: 50
          description: Represents the text of the error.
  responses:
    badRequest:
      description: Bad request. 
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/errorMessage'
    unauthAccess:
      description: Unauthorized access.
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/errorMessage'
    forbiddenAccess:
      description: Forbidden access.
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/errorMessage'
    conflictError:
      description: Conflict error. 
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/errorMessage'
    serverError:
      description: Internal server error. 
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/errorMessage'
    notFoundError:
      description: Not found. 
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/errorMessage'
    fileNotSupported:
      description: File format not supported.
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/errorMessage'

    
