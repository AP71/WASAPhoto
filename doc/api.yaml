openapi: 3.0.3
info:
  title: WASAPhoto
  description: |
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! Directly
    from your PC, you can upload your photos, and they will be visible to everyone who is following you.
  version: "0.0.1"
tags: 
  - name: "Login"
    description: "Login operations"
  - name: "Profile operations"
    description: "Profile operations"
  - name: "Interactions with other users"
    description: "Social operations"
  - name: "Feed operations"
    description: "Feed operations"
paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username'
        required: true
      responses:
        '201':
          description: |
              User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'              
  /profile:
    get:
      tags: ["Interactions with other users"]
      summary: Search users
      description: |
        Retrieves all users that match the username passed in the query. If the feedPageId is not passed, the first page will returned.
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: query
          schema: 
            type: string
            minLength: 3
            maxLength: 16
            pattern: '^[a-zA-Z0-9_.]*$'
            example: Maria
          description: User username.
          required: true
        - name: usersPageId
          in: query
          schema:
              type: integer
              example: 1
          description: Result page number.
          required: false
      responses:
        '200':
          description: |
            Obtain the list of the user. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '401':
          description: |
            Unauthorized access.
  /profile/{username}:
    parameters:
      - {$ref: '#components/parameters/username'}
    put:
      tags: ["Profile operations"]
      summary: Changes the username
      description: |
        Lets user to change their username with another one.
        If the username isn't free, an error will return.
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUsername'
        required: true
      responses:
        '201':
          description: |
            Username changed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username'
        '409':
          description: |
            This username is already used by another user.
        '401':
          description: |
            Unauthorized access.
    get:
      tags: ["Interactions with other users"]
      summary: Retrive a user's profile
      description: |
        Returns the profile of the user passed as input in the path.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Profile returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProfile'
        '401':
          description: |
            Unauthorized access.
        '404':
          description: |
            User not found.    
  /profile/{username}/photos:  
    parameters:
      - {$ref: '#components/parameters/username'}
    post:
      tags: ["Profile operations"]
      summary: Upload a new photo
      description: |
        Lets user to upload a new photo in their profile.
      operationId: uploadPhoto
      security:
        - bearerAuth: []
      requestBody:
        description: New photo
        content:
          image/*:
            schema:
              type: string
              format: binary            
        required: true
      responses:
        '201':
          description: |
            File uploaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '415':
          description: |
            File format not supported.
        '401':
          description: |
            Unauthorized access.
  /profile/{username}/photos/{photoId}:  
    parameters:
      - {$ref: '#/components/parameters/username'}
      - {$ref: '#/components/parameters/photoId'}
    delete:
      tags: ["Profile operations"]
      summary: Delete a photo
      description: |
        Lets user to delete a photo.
      operationId: deletePhoto
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |
            File deleted successfully.
        '404':
          description: |
            File not found.
        '401':
          description: |
            Unauthorized access.
  /profile/{username}/banned/{bannedUsername}:
    parameters:
      - {$ref: '#components/parameters/username'}
      - {$ref: '#components/parameters/bannedUsername'}
    put:
      tags: ["Interactions with other users"]
      summary: Ban another user
      description: |
        Lets user to ban another user.
      operationId: banUser
      security:
        - bearerAuth: []
      responses:
        '201':
          description: |
            User banned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '404':
          description: |
            User not found.
        '409':
          description: |
            This user was already banned by you.
    delete:
      tags: ["Interactions with other users"]
      summary: Unban another user
      description: |
        Lets user to unban another user.
      operationId: unbanUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |
            User unbanned successfully.
        '404':
          description: |
            User not found.
        '409':
          description: |
            This user wasn't banned from you.
  /search/{username}/following/{followedUsername}:
    parameters:
      - {$ref: '#components/parameters/username'}
      - {$ref: '#components/parameters/followedUsername'}
    put:
      tags: ["Interactions with other users"]
      summary: Follow a user
      description: |
        Lets user to follow another user.
      operationId: followUser
      security:
        - bearerAuth: []
      responses:
        '201':
          description: |
            User followed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '404':
          description: |
            User not found.
        '409':
          description: |
            Unable to follow this user (you already follow he).
    delete:
      tags: ["Interactions with other users"]
      summary: Unfollow a user
      description: |
        Lets user to unfollow another user.
      operationId: unfollowUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |
            User unfollowed successfully.
        '404':
          description: |
            User not found.
        '409':
          description: |
            Unable to unfollow this user (you don't follow this user).
        '401':
          description: |
            Unauthorized access.
  /feed:
    get:
      tags: ["Feed operations"]
      summary: Retrive photo stream
      description: |
        Retrieves all the photo shared by your following. If the pageId is not passed, the first page will returned.
      operationId: getMyStream
      security:
        - bearerAuth: []
      parameters:
        - name: pageId
          in: query
          schema: 
            type: integer
          description: Id of the page to retrive.
          required: false
      responses:
        '200':
          description: |
            Obtain the list of image.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedPhoto'
        '204':
          description: |
            There isn't any image to show.
        '401':
          description: |
            Unauthorized access.
  /feed/{photo}/like/{username}:
    parameters:
      - {$ref: '#components/parameters/photoId'}
      - {$ref: '#components/parameters/username'}
    put:
      tags: ["Feed operations"]
      summary: Place a like
      description: |
        Lets user to place a like on an image.
      operationId: likePhoto
      security:
        - bearerAuth: []
      responses:
        '201':
          description: |
            Like placed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':
          description: |
            Unauthorized access.
        '404':
          description: |
            Photo not found.
        '409':
          description: |
            Like already placed on this photo.
    delete:
      tags: ["Feed operations"]
      summary: Unplace a like
      description: |
        Lets user to unplace a like on an image.
      operationId: unlikePhoto
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |
            Like unplaced successfully.
        '401':
          description: |
            Unauthorized access.
        '404':
          description: |
            Photo not found.
        '409':
          description: |
            You didn't place a like on this photo.
  /feed/{photo}/comment/{username}:
    parameters:
      - {$ref: '#components/parameters/photoId'}
      - {$ref: '#components/parameters/username'}
    post:
      tags: ["Feed operations"]
      summary: Place a comment
      description: |
        Lets user to place a comment on an image.
      operationId: commentPhoto
      security:
        - bearerAuth: []
      requestBody:
        description: Comment details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
        required: true
      responses:
        '201':
          description: |
            Comment placed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':
          description: |
            Unauthorized access.
        '404':
          description: |
            Photo not found.
    delete:
      tags: ["Feed operations"]
      summary: Unplace a comment
      description: |
        Lets user to unplace a comment on an image.
      operationId: uncommentPhoto
      security:
        - bearerAuth: []
      parameters:
        - name: idCommento
          schema:
            type: string
            pattern: ^[a-zA-Z0-9]*$'
            minLength: 8
            maxLength: 8
          in: query
          required: true
          description: Comment identifier.
      responses:
        '204':
          description: |
            Comment unplaced successfully.
        '401':
          description: |
            Unauthorized access.
        '404':
          description: |
            Photo not found.
  /feed/{photoId}/comments:
    parameters:
    - name: photoId
      in: path
      schema:
        type: integer
        description: Photo identifier.
      required: true
    - name: pageId
      in: query
      schema:
        type: integer
        description: Page identifier.
      required: false
    get:
      tags: ["Feed operations"]
      summary: Retrive comments
      description: |
        Retrieve all comments related to the photo. If the commentsPageId is not passed, the first page of comments will returned.
      operationId: getComments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Obtain the list of comments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments'
        '204':
          description: |
            There aren't any comment to retrive.
        '401':
          description: |
            Unauthorized access.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    username: 
      description: User's name.
      name: username
      in: path
      required: true
      schema:
        type: string
    bannedUsername:
      description: Banned user's name.
      name: bannedUsername
      in: path
      required: true
      schema:
        type: string
    followedUsername:
      description: Followed username.
      name: followedUsername
      in: path
      required: true
      schema:
        type: string
    photoId:
      description: Photo identifier.
      name: photoId
      in: path
      required: true
      schema:
        type: integer
  schemas:  
    userProfile:
      title: User's Profile
      description: |
        Represents user profile, including followers, following, number of posts and photos.
      type: object
      properties:
        id: 
          type: string
          example: abcdef012345
          description: User identifier.
        username:
          type: string
          pattern: '^[a-zA-Z0-9_.]*$'
          minLength: 3
          maxLength: 16
          example: Maria
          description: User's username.
        photos:
          type: array
          items:
            $ref: '#/components/schemas/postsExample'
          minItems: 1
          maxItems: 1000
          description: List of photos.
        followers:
          type: integer
          example: 3543
          minimum: 0
          description: Number of followers.
        following: 
          type: integer
          example: 245
          minimum: 0
          description: Number of following.
        photoCounter:
          type: integer
          example: 6
          minimum: 0
          description: Number of photos.
    newUsername:
      title: New Username      
      description: |
        Represents the user's username.
      type: object
      properties:
        newUsername:
          type: string
          pattern: '^[a-zA-Z0-9_.]*$'
          minLength: 3
          maxLength: 16
          example: Maria
          description: New username value.
    comments:
      title: List of comments 
      description: |
        Represents the list of comments.
      type: object
      properties:
        comments:
          description: List of comments.
          type: array
          items:
            properties:
              idUser:
                type: string
                example: abcdef012345
                description: User identifier.
              username: 
                type: string
                pattern: '^[a-zA-Z0-9_.]*$'
                minLength: 3
                maxLength: 16
                example: Maria
                description: User's username.
              commentId: 
                type: string
                example: ff3r84vr
                description: Comment identifier.
              data:
                type: string
                format: date-time
                example: "2022-01-01T00:00:00Z"
                description: Upload date.
              text:  
                type: string
                minLength: 1
                maxLength: 250
                example: Bella foto!!
                description: Comment text.
          minItems: 1
          maxItems: 10
        nextCommentPageId:
          type: integer
          minimum: 1
          example: 2
          description: Id of the next page of comments.
    comment:
      title: Comment example
      description: |
        Represents one comment.
      type: object
      properties:
        text:
          type: string
          pattern: '^[a-zA-Z0-9_., !?:;""$%&€()[{}]]*$'
          minLength: 1
          maxLength: 250
          example: Bella foto!!
          description: Comment text.
    feedPhoto:
      title: Feed containing photos
      description: |
        Represents the feed.
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/postsExample'
          minItems: 1
          maxItems: 10
          description: List of photos.
        nextFeedPageId:
          type: integer
          minimum: 1
          example: 7
          description: Id of the next page of posts.
    postsExample:
      title: Post example
      description: |
        Represents one post.
      type: object
      properties:
        id: 
          type: string
          example: ff3r84vr
          description: Photo identifier.
        data:
          type: string
          format: date-time
          description: Upload date
          example: "2022-01-01T00:00:00Z"
        photo:  
          type: integer
          description: File identifier.
        numberOfLikes:
          type: integer
          example: 540
          minimum: 0
          description: Number of likes.
        numberOfComments:
          type: integer
          example: 15
          minimum: 0
          description: Number of comments.
    username:
      title: Username
      description: |
        Represents the username.
      type: object
      properties:
        username:
          type: string
          pattern: '^[a-zA-Z0-9_.]*$'
          minLength: 3
          maxLength: 16
          example: Maria
          description: User's username.
    users:
      title: List of users
      description: |
        Represents an object that includes a list of 10 photos and the number of the next page of itmes.
      type: object
      properties: 
        users:
          type: array
          items:
            properties:
              id:
                type: string
                example: abcdef012345
                description: User's identifier.
              username:
                type: string
                pattern: '^[a-zA-Z0-9_.]*$'
                minLength: 3
                maxLength: 16
                example: Maria
                description: User's username.
          minItems: 1
          maxItems: 1000
          description: List of Users.
        nextUsersPageId: 
          type: integer
          minimum: 1
          example: 7
          description: Id of the next page of users.
    success:
      title: Success message
      description: |
        Represents an object that includes a message.
      type: object
      properties:
        message:
          type: string
          example: Resource created
          description: Success message.
              
